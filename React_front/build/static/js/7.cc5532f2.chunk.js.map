{"version":3,"sources":["pages/Player/Player.Styled.js","assets/playerImg.jpg","pages/Player/Player.jsx"],"names":["Title","styled","h2","props","selected","theme","primary","color","font","fontSize","Subtitle","h3","border","standart","gutterSize","websiteWidth","tiny","height","small","P","p","FlexBlock","div","sticky","Player","auth","useContext","AuthContext","useState","data","setData","teamData","setTeamData","status","msg","error","setError","name","id","player","setPlayer","team","setTeam","playerPanel","setPlayerPanel","useEffect","fetch","process","headers","Authorization","token","then","res","json","length","backImg","center","background","secondary","large","notificationMessage","handleClick","to","onSubmit","e","preventDefault","placeholder","handleChange","target","value","type","AddPlayer","toUpperCase","RemovePlayer","map","x","i","key","player_name","radio","team_name","label","AddTeamPlayer","src","logoImg","alt"],"mappings":"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","file":"static/js/7.cc5532f2.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n// ### HEADINGS AND PARAGRAPHS ###\r\n\r\nexport const Title = styled.h2`\r\n  color: ${(props) =>\r\n    props.selected === true ? props.theme.primary.color : \"#000\"};\r\n  font-family: ${(props) => props.theme.primary.font};\r\n  font-weight: ${(props) => props.theme.primary.fontSize};\r\n`;\r\n\r\nexport const Subtitle = styled.h3`\r\n  font-family: ${(props) => props.theme.primary.font};\r\n  font-weight: ${(props) => props.theme.primary.fontSize};\r\n  border: ${(props) => props.theme.primary.border};\r\n  padding: ${(props) => props.theme.standart.gutterSize};\r\n\r\n  @media (max-width: ${(props) => props.theme.websiteWidth}) {\r\n    font-size: ${(props) => props.theme.tiny.height};\r\n    padding: ${(props) => props.theme.small.gutterSize};\r\n  }\r\n`;\r\n\r\nexport const P = styled.p`\r\n  font-family: ${(props) => props.theme.primary.font};\r\n  font-weight: ${(props) => props.theme.primary.fontSize};\r\n`;\r\n\r\n// ### SMALL COMPONENT BLOCKS ###\r\n\r\nexport const FlexBlock = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  position: ${(props) => (props.sticky === true ? \"sticky\" : \"\")};\r\n  top: ${(props) =>\r\n    props.sticky === true ? props.theme.small.gutterSize : \"\"};\r\n\r\n  @media (max-width: ${(props) => props.theme.websiteWidth}) {\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    display: block;\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/playerImg.8edd9fe8.jpg\";","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Section, Button, Input, Notification } from \"../../components\";\r\nimport { AddPlayer, RemovePlayer, AddTeamPlayer } from \"../../utils/Functions\";\r\nimport { AuthContext } from \"../../contexts/AuthContext\";\r\nimport * as S from \"./Player.Styled\";\r\nimport * as G from \"../../themes/Global.styled\";\r\nimport logoImg from \"../../assets/logo.svg\";\r\nimport backImg from \"../../assets/playerImg.jpg\";\r\n\r\nfunction Player() {\r\n  const auth = useContext(AuthContext);\r\n  // main data is used for player list\r\n  const [data, setData] = useState({});\r\n  // team data is used to store team list\r\n  const [teamData, setTeamData] = useState({});\r\n  // object error has status for hidden/visible function, msg for notification text, and color to set notification to error or regular style\r\n  const [error, setError] = useState({ status: false, msg: \"\", color: \"\" });\r\n  // object player has name for the AddPlayer funcion, id for RemovePlayer and status for component functionality ->\r\n  // - >it's also used as hook for creating new player\r\n  const [player, setPlayer] = useState({ status: false, name: \"\", id: \"\" });\r\n  // used for assing player to team\r\n  const [team, setTeam] = useState({ status: false, name: \"\" });\r\n  // used for remove botton toggle\r\n  const [playerPanel, setPlayerPanel] = useState(false);\r\n\r\n  // fetching players from DB\r\n  useEffect(() => {\r\n    fetch(`${process.env.REACT_APP_NODE_ROUTES}/players`, {\r\n      headers: {\r\n        Authorization: `${auth.token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // validatind fetched data\r\n        if (data.length > 0) {\r\n          setData(data);\r\n        } else {\r\n          // if there is nothing in database set notification as error with backend message\r\n          setData({ msg: data.msg });\r\n        }\r\n      });\r\n  }, [auth]);\r\n\r\n  // fetching team names from DB\r\n  useEffect(() => {\r\n    fetch(`${process.env.REACT_APP_NODE_ROUTES}/teams`, {\r\n      headers: {\r\n        Authorization: `${auth.token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // validatind fetched data\r\n        if (data.length > 0) {\r\n          setTeamData(data);\r\n        } else {\r\n          // if there is nothing in database set notification as error with backend message\r\n          setTeamData({ msg: data.msg });\r\n        }\r\n      });\r\n  }, [auth]);\r\n\r\n  return (\r\n    <>\r\n      <G.PageBackground backImg={backImg} />\r\n\r\n      <Section\r\n        center={true}\r\n        background={(props) => props.theme.secondary.background}\r\n      >\r\n        <G.Block large={true}>\r\n          {/* Notification is turn on and off by \"error\" object status property */}\r\n          {error.status && (\r\n            <Notification\r\n              notificationMessage={error.msg}\r\n              handleClick={() => setError({ status: false })}\r\n              color={error.color}\r\n            />\r\n          )}\r\n\r\n          <S.Title selected={true}>PLAYERS</S.Title>\r\n\r\n          <G.StyledLink to=\"/team\">\r\n            <S.Title>TEAMS</S.Title>\r\n          </G.StyledLink>\r\n\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n          >\r\n            {/* ### ADD PLAYER BLOCK ### */}\r\n            <G.InputBlock>\r\n              {/* using object \"player\" status property to turn on/off this section */}\r\n              {/* this button set's it on ->  */}\r\n              <Button handleClick={() => setPlayer({ status: true })}>\r\n                ADD PLAYER\r\n              </Button>\r\n            </G.InputBlock>\r\n            {/* -> this section is responding to object's \"player\" status change */}\r\n            {player.status && (\r\n              <G.InputBlock>\r\n                <Input\r\n                  placeholder=\"enter new players name\"\r\n                  handleChange={(e) => {\r\n                    setPlayer({ name: e.target.value, status: true });\r\n                  }}\r\n                />\r\n                <S.FlexBlock>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    type=\"submit\"\r\n                    handleClick={() => {\r\n                      AddPlayer(player, auth, setError, setData);\r\n                    }}\r\n                  >\r\n                    SAVE\r\n                  </Button>\r\n                  <Button\r\n                    handleClick={() => {\r\n                      setPlayer({ status: false });\r\n                    }}\r\n                  >\r\n                    CLOSE\r\n                  </Button>\r\n                </S.FlexBlock>\r\n              </G.InputBlock>\r\n            )}\r\n          </form>\r\n\r\n          <G.Frame>\r\n            {/* ### LOADING/BACKEND MESSAGES ### */}\r\n            {/* is allways displayed untill is rewriten with data.msg or data */}\r\n            {(data.msg || !data.length > 0) && (\r\n              <S.Subtitle> {data.msg || \"loading...\"}</S.Subtitle>\r\n            )}\r\n\r\n            <form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n              }}\r\n            >\r\n              {/* ### ADD TO TEAM BLOCK ### */}\r\n              {/* after recieving data (testing with array.length method) from DB this section is visible-> \r\n              -> after pressing add to by team btn remove button becomes hidden */}\r\n              {data.length > 0 && playerPanel && (\r\n                <>\r\n                  <S.FlexBlock sticky={true}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      handleClick={() => {\r\n                        setTeam({ status: true });\r\n                      }}\r\n                    >\r\n                      {/* if there  is player name is selected null value is given */}\r\n                      ADD {player.name ? player.name.toUpperCase() : \"\"} TO MY\r\n                      TEAM\r\n                    </Button>\r\n\r\n                    {/* remove button activates remove player function and restarts player value in hook */}\r\n\r\n                    <Button\r\n                      type=\"submit\"\r\n                      handleClick={(e) => {\r\n                        RemovePlayer(player, auth, setError, setData);\r\n                        setPlayerPanel(false);\r\n                        setPlayer({ name: \"\" });\r\n                      }}\r\n                    >\r\n                      X\r\n                    </Button>\r\n                  </S.FlexBlock>\r\n\r\n                  {/*  same logic as before turning on/off part of section with object status, this time it's \"team\" */}\r\n                  {team.status && (\r\n                    <G.InputBlock sticky={true}>\r\n                      <G.Frame>\r\n                        <S.FlexBlock>\r\n                          {/* displaying recieved messege from back end (if user has no team set up yet) */}\r\n                          {teamData.msg && (\r\n                            <>\r\n                              <S.P>{teamData.msg}</S.P>\r\n                              <G.StyledLink to=\"/team\">\r\n                                create your team\r\n                              </G.StyledLink>\r\n                            </>\r\n                          )}\r\n\r\n                          {/* after recieving data from DB (testing with array.length method) this section is visible */}\r\n                          {teamData.length > 0 &&\r\n                            // data from second fecth is maped and displayed ->\r\n                            // -> input is seting object with target.value and \"player\" object propery \"name\"\r\n                            teamData.map((x, i) => (\r\n                              <div key={i}>\r\n                                <Input\r\n                                  type=\"radio\"\r\n                                  handleChange={(e) => {\r\n                                    setTeam({\r\n                                      status: true,\r\n                                      name: e.target.value,\r\n                                      player_name: player.name,\r\n                                    });\r\n                                  }}\r\n                                  radio={[\r\n                                    { value: x.team_name, label: x.team_name },\r\n                                  ]}\r\n                                />\r\n                              </div>\r\n                            ))}\r\n                          {/* button is submiting props to function ->\r\n                          -> he has to be visible only when there is teamData fetched from DB -> \r\n                          -> setPlayer restarts value of player in hook (all nessesery info is saved into \"team\")*/}\r\n                          {teamData.length > 0 && (\r\n                            <Button\r\n                              color=\"primary\"\r\n                              type=\"submit\"\r\n                              handleClick={() => {\r\n                                AddTeamPlayer(team, auth, setError);\r\n                                setPlayer({ name: \"\" });\r\n                              }}\r\n                            >\r\n                              SAVE\r\n                            </Button>\r\n                          )}\r\n                          {/* button to close this part of section */}\r\n                          <Button\r\n                            handleClick={() => setTeam({ status: false })}\r\n                          >\r\n                            CLOSE\r\n                          </Button>\r\n                        </S.FlexBlock>\r\n                      </G.Frame>\r\n                    </G.InputBlock>\r\n                  )}\r\n                </>\r\n              )}\r\n\r\n              {/*  ### PLAYER LIST BLOCK ### */}\r\n              {/* validating data from first fetch with array.length method */}\r\n              {data.length > 0 &&\r\n                // mapping and displaying first fetch data\r\n                data.map((x, i) => (\r\n                  <G.TableButtonBlock border={x.id} key={i}>\r\n                    <G.InputBrick>\r\n                      <Input\r\n                        type=\"radio\"\r\n                        handleChange={(e) => {\r\n                          setPlayer({\r\n                            name: e.target.value,\r\n                            id: x.id,\r\n                          });\r\n                          setPlayerPanel(true);\r\n                        }}\r\n                        radio={[{ value: x.name, label: x.name }]}\r\n                      />\r\n                    </G.InputBrick>\r\n                  </G.TableButtonBlock>\r\n                ))}\r\n            </form>\r\n          </G.Frame>\r\n        </G.Block>\r\n\r\n        <G.ButtonBlock>\r\n          <Link to=\"/\">\r\n            <Button>BACK</Button>\r\n          </Link>\r\n        </G.ButtonBlock>\r\n      </Section>\r\n\r\n      <Link to=\"/\">\r\n        <G.Logo src={logoImg} alt=\"teamo logo\" />\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n"],"sourceRoot":""}