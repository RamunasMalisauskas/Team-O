{"version":3,"sources":["pages/Team/Team.Styled.js","assets/teamImg.jpg","pages/Team/Team.jsx"],"names":["Title","styled","h2","props","selected","theme","support","color","primary","font","fontSize","Subtitle","h3","border","tiny","gutterSize","websiteWidth","height","small","FlexBlock","div","Row","Team","auth","useContext","AuthContext","useState","data","setData","teamData","setTeamData","status","name","newTeam","setNewTeam","team_name","selectedTeam","setSelectedTeam","state","trade","setTrade","removeTeam","setRemoveTeam","player","setPlayer","msg","error","setError","useEffect","fetch","process","headers","Authorization","token","then","res","json","length","backImg","center","background","large","notificationMessage","handleClick","to","onSubmit","e","preventDefault","placeholder","handleChange","target","value","type","AddTeam","map","x","i","key","TeamPlayers","toUpperCase","TradePlayer","radio","players","label","id","RemoveTeamPlayer","RemoveTeam","src","logoImg","alt"],"mappings":"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","file":"static/js/8.6ee9f4df.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\n// ### HEADINGS AND PARAGRAPHS ###\r\n\r\nexport const Title = styled.h2`\r\n  color: ${(props) =>\r\n    props.selected === true ? props.theme.support.color : \"#000\"};\r\n  font-family: ${(props) => props.theme.primary.font};\r\n  font-weight: ${(props) => props.theme.primary.fontSize};\r\n`;\r\n\r\nexport const Subtitle = styled.h3`\r\n  font-family: ${(props) => props.theme.primary.font};\r\n  font-weight: ${(props) => props.theme.primary.fontSize};\r\n  border-bottom: ${(props) => props.theme.support.border};\r\n  padding: ${(props) => props.theme.tiny.gutterSize} 0;\r\n\r\n  @media (max-width: ${(props) => props.theme.websiteWidth}) {\r\n    font-size: ${(props) => props.theme.tiny.height};\r\n    padding: ${(props) => props.theme.small.gutterSize};\r\n  }\r\n`;\r\n\r\n// ### SMALL COMPONENT BLOCKS ###\r\n\r\nexport const FlexBlock = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n\r\n  @media (max-width: ${(props) => props.theme.websiteWidth}) {\r\n    text-align: center;\r\n    margin: 0 auto;\r\n    display: block;\r\n  }\r\n`;\r\n\r\nexport const Row = styled.div`\r\n  padding: ${(props) => props.theme.tiny.gutterSize} 0;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/teamImg.ed015cfa.jpg\";","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Section, Button, Input, Notification } from \"../../components\";\r\nimport {\r\n  AddTeam,\r\n  TeamPlayers,\r\n  TradePlayer,\r\n  RemoveTeamPlayer,\r\n  RemoveTeam,\r\n} from \"../../utils/Functions\";\r\nimport { AuthContext } from \"../../contexts/AuthContext\";\r\nimport * as S from \"./Team.Styled\";\r\nimport * as G from \"../../themes/Global.styled\";\r\nimport logoImg from \"../../assets/logo.svg\";\r\nimport backImg from \"../../assets/teamImg.jpg\";\r\n\r\nfunction Team() {\r\n  const auth = useContext(AuthContext);\r\n  // main data is used to store team name\r\n  const [data, setData] = useState({});\r\n  //  second data is used to store team player info\r\n  const [teamData, setTeamData] = useState({});\r\n  //  new team object is uset to store and pass input data, to create new team\r\n  const [newTeam, setNewTeam] = useState({ status: false, name: \"\" });\r\n  //  selected team object is used for player trade / team deletion functions\r\n  const [selectedTeam, setSelectedTeam] = useState({\r\n    status: false,\r\n    team_name: \"\",\r\n  });\r\n  // trade is used as control block for all elements/components that are nedded for trade function\r\n  const [trade, setTrade] = useState({ state: false });\r\n  // trade is used as control block for all elements/components that are nedded for trade function\r\n  const [removeTeam, setRemoveTeam] = useState({ state: false });\r\n  //  player hook is used for trade player function\r\n  const [player, setPlayer] = useState();\r\n  // error object is for notification manegment\r\n  const [error, setError] = useState({ status: false, msg: \"\", color: \"\" });\r\n\r\n  // fetching team names from DB\r\n  useEffect(() => {\r\n    fetch(`${process.env.REACT_APP_NODE_ROUTES}/teams`, {\r\n      headers: {\r\n        Authorization: `${auth.token}`,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        // validatind fetched data\r\n        if (data.length > 0) {\r\n          setData(data);\r\n        } else {\r\n          // if there is nothing in database set notification as error with backend message\r\n          setData({ msg: data.msg });\r\n        }\r\n      });\r\n  }, [auth]);\r\n\r\n  return (\r\n    <>\r\n      <G.PageBackground backImg={backImg} />\r\n\r\n      <Section\r\n        center={true}\r\n        background={(props) => props.theme.support.background}\r\n      >\r\n        <G.Block large={true}>\r\n          {/* Notification is turn on and off by \"error\" object status property */}\r\n          {error.status && (\r\n            <Notification\r\n              notificationMessage={error.msg}\r\n              handleClick={() => setError({ status: false })}\r\n              color={error.color}\r\n            />\r\n          )}\r\n\r\n          <div>\r\n            <G.StyledLink to=\"/player\">\r\n              <S.Title>PLAYERS</S.Title>\r\n            </G.StyledLink>\r\n\r\n            <S.Title selected={true}>TEAMS</S.Title>\r\n          </div>\r\n\r\n          {/* ### ADD TEAM BLOCK ### */}\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n            }}\r\n          >\r\n            <G.InputBlock>\r\n              {/* using object \"newTeam\" status property to turn on/off this section */}\r\n              {/* this button set's it on ->  */}\r\n              <Button\r\n                color=\"support\"\r\n                handleClick={() => setNewTeam({ status: true })}\r\n              >\r\n                ADD TEAM\r\n              </Button>\r\n            </G.InputBlock>\r\n\r\n            {/* -> this section is responding to object's \"newTeam\" status change */}\r\n            {newTeam.status && (\r\n              <G.InputBlock>\r\n                <Input\r\n                  placeholder=\"enter team name\"\r\n                  handleChange={(e) => {\r\n                    setNewTeam({ name: e.target.value, status: true });\r\n                  }}\r\n                />\r\n\r\n                <S.FlexBlock>\r\n                  <Button\r\n                    color=\"support\"\r\n                    type=\"submit\"\r\n                    handleClick={() => {\r\n                      AddTeam(newTeam, auth, setError, setData);\r\n                    }}\r\n                  >\r\n                    SAVE\r\n                  </Button>\r\n                  <Button\r\n                    handleClick={() => {\r\n                      setNewTeam({ status: false });\r\n                    }}\r\n                  >\r\n                    CLOSE\r\n                  </Button>\r\n                </S.FlexBlock>\r\n              </G.InputBlock>\r\n            )}\r\n          </form>\r\n\r\n          <G.Frame border=\"support\">\r\n            {/* ### LOADING/BACKEND MESSAGES ### */}\r\n            {/* is allways displayed untill is rewriten with data.msg or data */}\r\n            {(data.msg || !data.length > 0) && (\r\n              <S.Subtitle>{data.msg || `loading...`}</S.Subtitle>\r\n            )}\r\n\r\n            {/* ### TEAM BLOCK ### */}\r\n            {/* form preventing to refresh and  monitoring submits */}\r\n            <form\r\n              onSubmit={(e) => {\r\n                e.preventDefault();\r\n              }}\r\n            >\r\n              {data.length > 0 && !trade.status && (\r\n                <>\r\n                  <S.Subtitle>TEAMS:</S.Subtitle>\r\n\r\n                  {/* validating first fetch data (as array) and displaying as buttons with team names */}\r\n                  <S.FlexBlock>\r\n                    {data.map((x, i) => (\r\n                      <S.Row key={i}>\r\n                        <Button\r\n                          key={i}\r\n                          handleClick={() => {\r\n                            TeamPlayers(\r\n                              { name: x.team_name },\r\n                              auth,\r\n                              setError,\r\n                              setTeamData\r\n                            );\r\n                            // reseting selected player from previous team when swittiching teams\r\n                            setPlayer({ name: \"\" });\r\n                            setSelectedTeam({\r\n                              status: true,\r\n                              team_name: x.team_name,\r\n                            });\r\n                            // resseting remove team status thus closing remove block when swittiching teams\r\n                            setRemoveTeam({ status: false });\r\n                          }}\r\n                        >\r\n                          {x.team_name.toUpperCase()}\r\n                        </Button>\r\n                      </S.Row>\r\n                    ))}\r\n                  </S.FlexBlock>\r\n                </>\r\n              )}\r\n\r\n              {/* ### TRADE PLAYER BLOCK ### */}\r\n              {data.length > 0 && trade.status && !removeTeam.status && (\r\n                <>\r\n                  <S.Subtitle>SELECT TEAM TO FINISH TRADE:</S.Subtitle>\r\n\r\n                  {/* mapping team buttons again with diferent function attached */}\r\n                  {data.map((x, i) => (\r\n                    <Button\r\n                      key={i}\r\n                      handleClick={() => {\r\n                        TradePlayer(\r\n                          player,\r\n                          { team_name: x.team_name },\r\n                          selectedTeam,\r\n                          auth,\r\n                          setError,\r\n                          setTeamData\r\n                        );\r\n                        setTrade({ status: false });\r\n                        // reseting selected player from previous team when swithcing teams\r\n                        setPlayer({ name: \"\" });\r\n                      }}\r\n                    >\r\n                      {x.team_name}\r\n                    </Button>\r\n                  ))}\r\n                </>\r\n              )}\r\n\r\n              {/*  if there is message from back-end it's displayed here (about team data) */}\r\n              {teamData.msg && player && (\r\n                <S.Subtitle>{teamData.msg}</S.Subtitle>\r\n              )}\r\n\r\n              {/* trade block is replacing this header when it's status changes */}\r\n              {teamData.length > 0 && !trade.status && !removeTeam.status && (\r\n                <>\r\n                  <S.Subtitle>{selectedTeam.team_name} PLAYERS:</S.Subtitle>\r\n                  {\r\n                    // mapping team players as inputs\r\n                    teamData.map((x, i) => (\r\n                      <G.TableButtonBlock key={i}>\r\n                        <S.FlexBlock>\r\n                          <G.InputBrick>\r\n                            <Input\r\n                              type=\"radio\"\r\n                              radio={[{ value: x.players, label: x.players }]}\r\n                              handleChange={(e) => {\r\n                                setPlayer({\r\n                                  name: e.target.value,\r\n                                  id: x.id,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </G.InputBrick>\r\n\r\n                          <div>\r\n                            <Button\r\n                              type=\"submit\"\r\n                              color=\"support\"\r\n                              handleClick={() => {\r\n                                setTrade({ status: true });\r\n                              }}\r\n                            >\r\n                              TRADE\r\n                            </Button>\r\n\r\n                            <Button\r\n                              type=\"submit\"\r\n                              handleClick={() => {\r\n                                RemoveTeamPlayer(\r\n                                  selectedTeam,\r\n                                  player,\r\n                                  auth,\r\n                                  setError,\r\n                                  setTeamData\r\n                                );\r\n                                // reseting player name with hook after remove\r\n                                setPlayer({ name: \"\" });\r\n                              }}\r\n                            >\r\n                              X\r\n                            </Button>\r\n                          </div>\r\n                        </S.FlexBlock>\r\n                      </G.TableButtonBlock>\r\n                    ))\r\n                  }\r\n                </>\r\n              )}\r\n\r\n              {/* ### REMOVE TEAM BLOCK ### */}\r\n              {removeTeam.status && (\r\n                <>\r\n                  <S.Subtitle>\r\n                    Are you sure about deleting entire team?\r\n                  </S.Subtitle>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    handleClick={() => {\r\n                      setRemoveTeam({ status: false });\r\n                    }}\r\n                  >\r\n                    NO\r\n                  </Button>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    color=\"support\"\r\n                    handleClick={() => {\r\n                      RemoveTeam(selectedTeam, auth, setError, setData);\r\n                      setRemoveTeam({ status: false });\r\n                      setTeamData(\"\");\r\n                    }}\r\n                  >\r\n                    YES\r\n                  </Button>\r\n                </>\r\n              )}\r\n\r\n              {selectedTeam.status && (\r\n                <G.InputBrick>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    color=\"support\"\r\n                    handleClick={() => {\r\n                      setRemoveTeam({ status: true });\r\n                    }}\r\n                  >\r\n                    REBUILD\r\n                  </Button>\r\n                </G.InputBrick>\r\n              )}\r\n            </form>\r\n          </G.Frame>\r\n        </G.Block>\r\n\r\n        <G.ButtonBlock>\r\n          <Link to=\"/\">\r\n            <Button>BACK</Button>\r\n          </Link>\r\n        </G.ButtonBlock>\r\n      </Section>\r\n\r\n      <Link to=\"/\">\r\n        <G.Logo src={logoImg} alt=\"teamo logo\" />\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Team;\r\n"],"sourceRoot":""}